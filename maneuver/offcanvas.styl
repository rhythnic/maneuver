// Function: Min Positive Value
// 
// If both values are truthy, return the minimum values
// If only one value is truthy, return that value
// Else return 0
//
// Params: val1 val2
-minPositiveValue(val1, val2)
  if (val1 && val2)
    return min(val1, val2)
  else if (val1 || val2)
    return val1 || val2
  return 0


// Function: Offcanvas Content Push Settings
// 
// Push enables menus to push content instead of overlapping it.
// Push only applies when share or show don't apply
//
// Params:
//   size:    size of offcanvas menus (4 values)
//   share:   min-width at which menu shares screen with content (4 values)
//   show:    min-width at which menus are always visible (4 values)
//   push:    boolean - menu pushes content instead of overlapping (4 values)
//   content: css selector for content area
//   open:    classes that parent offcanvas element will toggle for open (4 values)
-offcanvasContentPushSettings(size, share, show, push, content, open, sides)
  opposite = ('bottom' 'left' 'top' 'right')
  for num in 0 1 2 3
    if push[num] && size[num]
      mw = -minPositiveValue(share[num], show[num])
      if (mw)
        @media (max-width mw)
          &.{open[num]} {content}
            margin-{sides[num]}: size[num]
            margin-{opposite[num]}: - size[num]
      else
        &.{open[num]} {content}
          margin-{sides[num]}: size[num]
          margin-{opposite[num]}: - size[num]


// Function: Offcanvas Content Share Settings
// 
// Share is the min width at which the menu and the content will share the screen.
//
// Params:
//   size:    size of offcanvas menus (4 values)
//   share:   min-width at which menu shares screen with content (4 values)
//   content: css selector for content area
//   open:    classes that parent offcanvas element will toggle for open (4 values)
-offcanvasContentShareSettings(size, share, content, open, sides)
  for num in 0 1 2 3
    if share[num]
      @media (min-width share[num])
        &.{open[num]} > {content}
          margin-{sides[num]}: size[num]

  if share[0]
    @media (min-width share[0])
      &.{open[0]}
        if open[2]
          &:not(.{open[2]}) > {content}
            height 'calc(100% - %s)' % size[0]
          &.{open[2]} > {content}
            height 'calc(100% - %s)' % (size[0] + size[2])
  if share[2]
    @media (min-width share[2])
      &.{open[2]}
        if open[0]
          &:not(.{open[0]}) > {content}
            height 'calc(100% - %s)' % size[2]


// Function: Offcanvas Content Show Settings
// 
// Show is the minimum width at which the menu is always visible and can't be hidden
//
// Params:
//   size:    size of offcanvas menus (4 values)
//   show:    min-width at which menus are always visible (4 values)
//   content: css selector for content area
//   open:    classes that parent offcanvas element will toggle for open (4 values)
-offcanvasContentShowSettings(size, show, content, open, sides)
  for num in 0 1 2 3
    if show[num]
      @media (min-width show[num])
        & > {content}
          margin-{sides[num]}: size[num]

  if show[0]
    @media (min-width show[0])
      & > {content}
        if show[2] and show[2] <= show[0]
          height 'calc(100% - %s)' % (size[0] + size[2])
        else
          height 'calc(100% - %s)' % size[0]
      if open[2]
        &.{open[2]}:not(.{open[0]}) > {content}
          height 'calc(100% - %s)' % (size[0] + size[2])

  if show[2]
    @media (min-width show[2])
      & > {content}
        if show[0] and show[0] <= show[2]
          height 'calc(100% - %s)' % (size[0] + size[2])
        else
          height 'calc(100% - %s)' % size[2]
      if open[0]
        &.{open[0]}:not(.{open[2]}) > {content}
          height 'calc(100% - %s)' % (size[0] + size[2])


// -------
// Offcanvas
// -------

// Function: Offcanvas Content Settings
// 
// Configure the content element.  Parameters contain info for possible menus on all 4 sides.
// Parameters follow css shorthand convention (top right bottom left), except all are neccessary
//
// Params:
//   size:    size of offcanvas menus (4 values)
//   share:   min-width at which menu shares screen with content (4 values)
//   show:    min-width at which menus are always visible (4 values)
//   push:    boolean - menu pushes content instead of overlapping (4 values)
//   content: css selector for content area
//   open:    classes that parent offcanvas element will toggle for open (4 values)

-offcanvasContentSettings(size, share, show, push, content, open, sides)
  & > {content}
    position relative
    height 100%
    overflow-y auto
  -offcanvasContentPushSettings(size, share, show, push, content, open, sides)
  -offcanvasContentShareSettings(size, share, content, open, sides)
  -offcanvasContentShowSettings(size, show, content, open, sides)



// Function: Offcanvas Menu Settings
// 
// Configure the offcanvas menu according to the params.
// Params:
//   side:  'top', 'right', 'bottom', 'left'
//   size:  width (left/right) or height (top/bottom) of menu
//   show:   min-width where menu is always visible
// 
// ex. -offcanvasMenuSettings()
// ex. -offcanvasMenuSettings(side: 'top', size: 10em, show: 0)   // show:0 or show:false

-offcanvasMenuSettings(side, size, show)
  position absolute
  overflow-y auto
  {side} 0
  
  if side is 'left' or side is 'right'
    width size
    height 100%
    top 0
  if side is 'top' or side is 'bottom'
    width 100%
    height size
    left 0
  if side is 'left'
    transform translate(- size, 0)
  if side is 'right'
    transform translate(size, 0)
  if side is 'top'
    transform translate(0, - size)
  if side is 'bottom'
    transform translate(0, size)
  if show
    @media (min-width show)
      transform translate(0,0)

// Mixin: Offcanvas Multi
// 
// Create an offcanvas element that will contain one content area and 1-4 offcanvas menus.
// Parameters follow css shorthand convention (top right bottom left), except all are neccessary
//
// Params:
//   size:    size of all 4 offcanvas menus
//   share:   min-width at which menu shares screen with content
//   show:    min-width at which menus are always visible (4 values)
//   push:    boolean - menu pushes content instead of overlapping (4 values)
//   menu:    css selectors for menus (4 values)
//   content: css selector for content area
//   open:    classes that parent offcanvas element will toggle for open (4 values)
// 
// ex. offcanvasMulti()
// ex. offcanvasMulti(size: (10em 0 20em 0), push: (0 0 0 0), show: (0 0 80em 0), menu: ('nav' 0 '.about-us' 0), content: 'article', open: ('open-nav' 0 'open-about' 0))

offcanvasMulti(size = (0 15em 0 15em), share = (0 40em 0 40em), show = (0 80em 0 80em), push = (0 0 0 0),
               menu = ('.menu-top' '.menu-right' '.menu-bottom' '.menu-left'), content = '.content',
               open = ('open-top' 'open-right' 'open-bottom' 'open-left'), transition = all 0.3s ease)
  sides = ('top' 'right' 'bottom' 'left')
  position relative
  overflow hidden
  & > *
    transition transition
    box-sizing border-box
  
  for num in 0 1 2 3
    if size[num]
      & > {menu[num]}
        -offcanvasMenuSettings(sides[num], size[num], show[num])
      &.{open[num]}
        & > {menu[num]}
          transform translate(0,0)
  
  -offcanvasContentSettings(size, share, show, push, content, open, sides)


// Mixin: Offcanvas
// 
// Create an offcanvas element that will contain one content area and 1 menu.
//
// Params:
//   side:  'top', 'right', 'bottom', 'left'
//   size:  width (left/right) or height (top/bottom) of menu
//   share:  min-width at which menu pushes the content, instead of overlapping
//   show:   min-width where menu is always visible
//   menu:   css selector for menu
//   content:   css selector for content area
//   open:  class that parent offcanvas element will toggle for open
// 
// ex. offcanvas()
// ex. offcanvas(side: 'right', size: 25em, push: 0, show: 80em, menu: 'nav', content: 'article', open: 'open')

offcanvas(side = 'left', size = 15em, share = 40em, show = 80em, push = 0, menu = ".menu",
          content = ".content", open = "open", transition = all 0.3s ease)
  if side is 'top'
    offcanvasMulti(size: (size 0 0 0), share: (share 0 0 0), show: (show 0 0 0), push: (push 0 0 0),
      menu: (menu 0 0 0), content: content, open: (open 0 0 0), transition: transition)
  if side is 'right'
    offcanvasMulti(size: (0 size 0 0), share: (0 share 0 0), show: (0 show 0 0), push: (0 push 0 0),
      menu: (0 menu 0 0), content: content, open: (0 open 0 0), transition: transition)
  if side is 'bottom'
    offcanvasMulti(size: (0 0 size 0), share: (0 0 share 0), show: (0 0 show 0), push: (0 0 push 0),
      menu: (0 0 menu 0), content: content, open: (0 0 open 0), transition: transition)
  if side is 'left'
    offcanvasMulti(size: (0 0 0 size), share: (0 0 0 share), show: (0 0 0 show), push: (0 0 0 push),
      menu: (0 0 0 menu), content: content, open: (0 0 0 open), transition: transition)


// Additive Mixin: Offcanvas Menus
// 
// WARNING: Creates classes in your css and styles them - not to be used inside
// an element.
// 
// This mixin makes it such that you can use classes to define offcanvas menus.
// - .offcanvas - creates an offcanvas container
// - .menu-(top/right/bottom/left) - creates an offcanvas menu
// - .content - creates a content area for the offcanvs menu
//   .open-(top/right/bottom/left) - toggles the corresponding menu open/close when placed on offcanvas container.

offcanvasMenus()
  .offcanvas
    offcanvasMulti(size: (15em 15em 15em 15em), share: (40em 30em 40em 30em), show: (0 80em 0 80em))